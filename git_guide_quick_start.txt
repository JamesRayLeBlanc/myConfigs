####################  Section Start  ###########################################
#################### Clone/Tracking  ###########################################
Cloning a repo:
    git clone <repo_URL_or_ssh_style_dir> <optional_name>
    Examples:
        git clone James.LeBlanc@glados:/work/git_repos/new_work_thing SAD
            This will ssh to a computer named glados as user James.LeBlanc and clone the new_work_thing git repo to a directory named SAD
        git clone https://github.com/JamesRayLeBlanc/myConfigs.git
            This will go to URL, clone that repo, and name the local filesystem directory myConfigs (same name as repo is default)

First time checking out a branch (creating local branch from existing remote branch)
    git checkout -t <NAME_FROM_GIT_BRANCH_-a>
    Examples:
        git checkout -t remotes/origin/Plotting    (assumes remote branch named Plotting)
            This will create a local branch named Plotting and checkout to that branch.
            It will also automatically set the local Plotting branch to track the remote one.
            ** Note that the remotes/origin/Plotting name was pasted in from the git branch -a command

Fix tracking for branches checked out w/o -t or checked in w/o -u
    git branch --set-upstream <LOCAL_NAME> <git branch -a name>  ##This is old new one is next
    git branch --set-upstream-to=<git branch -a name>
    Examples:
        git branch --set-upstream-to=remotes/origin/Plotting
            This will set the current local branch to track the remote branch named Plotting

####################  Section End    ###########################################


####################  Section Start  ###########################################
####################     Branches    ###########################################
Feature Branch Creation:
1.  checkout the branch you are basing it off of
2.  pull
3.  create new local branch
4.  push local branch to remote (if needed)

    git checkout master
    git pull
    git checkout -b newFeatureName
    git push -u origin newFeatureName

** The -u tells it to 'upstream' so tracking of local branch will be set to newly created remote branch.  
Any amount of work (git add, git commit, etc) can take place between step 3 and 4.



Merging a feature branch back into stable branch:

1.  checkout feature branch
2.  pull
3.  checkout stable branch
4.  pull
5.  merge

    git checkout theFeatureBranch
    git pull
    git checkout master
    git pull
    git merge theFeatureBranch

** For really complex merges... you might merge master into feature 1st and compile and test that new version of feature before
then doing these sets of steps.


Fast 'merge' for lining up commits cleanly when you know not much has happened
1.  checkout feature branch
2.  rebase stable branch
3.  push stable

    git checkout theFeature
    git rebase master
    git push master



Branch Deletion:
git branch -D <LOCAL_BRANCH_NAME>
git push origin --delete <REMOTE_BRANCH_NAME>  (leave off remotes/remote_name/ portion of 'git branch -a')

    Examples:
        git branch -D Plotting
        git push origin --delete Plotting

####################  Section End    ###########################################


####################  Section Start  ###########################################
####################      Tags       ###########################################
Tags and stuff:

    git tag NEW_TAG
       Creates a NEW_TAG at the current commit point.

    git rev-list -n 1 <TAGNAME>
    Reports the shah ID of the tag 
    Examples:
        git rev-list -n 1 SOME_RELEASE_1.0
            Finds a tag named SOME_RELEASE_1.0 and then prints the shah ID of that tag

    pushing/pulling tags
    git push --tags origin <LOCAL_NAME_IF_TRACKING>
    git fetch --tags

    typical tagging workflow:
    git fetch --tags
    git tag My_New_TagName
    git push --tags origin MyBranch

    You *can* checkout to a tag, but be warned that this will put you in a
    branch-less headless state.
    Example:
        git checkout SomeTagName

    List all all tags:
        git tag -l
        git tag -l | grep name


####################  Section End    ###########################################



####################  Section Start  ###########################################
####################  Commit Editing ###########################################
Edit an existing (local not remote...) commit
#simple
git commit --amend

#complex; fix up last n commits
git rebase -i HEAD~n

#showing diffs for staged files (files that are ready to be committed via the git add cmd)
git diff --cached
####################  Section End    ###########################################


####################  Section Start  ###########################################
####################     Bundles     ###########################################
Creating a bundle
    git bundle create bundleFileName LocalBranchName
	     Creates a new git bundle named bundleFileName using the current git repo's LocalBranchName
		  I usually name my git bundle files something.bundle e.g. RepoName-BranchName-Date.bundle
	Ex:
	  cd /work/di2e_repos/mission-planner
	  git bundle create /work/di2e_repos/mp-uswdss_b2r3-18.04.26.bundle USWDSS_B2R3
	    .. Creates a file in the di2e_repos directory named mp-uswdss_b2r3-18.04.26.bundle using the
		    USWDSS_B2R3 branch of the local git repo found in the mission-planner directory.
		    (at least I assume it is local, I always have local and remote sync'd when I'm doing this).

	  cd /work/di2e_repos/pim-track-service
          git bundle create /work/di2e_repos/pim-track-2018DEC11.bundle master
	    .. Creates a file in the di2e_repos directory named pim-track-2018DEC11.bundle using the
		    master branch of the local git repo found in the pim-track-service directory.
		    (at least I assume it is local, I always have local and remote sync'd when I'm doing this).

After creating the bundle, use whatever copying means necessary to move it to the other server.

Using the bundle to merge with existing Repo:
On the other server run the following commands to update the repo with the git bundle
	 git remote -v    ##checks existing remotes; if any bundles you might want to remove them
	 git remote rm bundle   #removes old bundle
	 git remote add bundle /full/path/to/new/bundleFile         #adds new bundle as potential remote
	 git remote update                      #updates stuff?
	 git pull bundle BranchName             #pulls the bundle version of branch into local branch
	 git push origin BranchName             #pushes local branch (that should now have bundle updates) to original remote


(untested)
Using the bundle to create new Repo:
On the other server run the following commands to create a new repo with the git bundle
	 git clone /full/path/to/new/bundleFile <optional_dir_name>
         cd <optional_dir_name>   #or cd into whatever directory was created if no dir_name given
         git status   #should see that your git repo is here now
         git log

####################  Section End    ###########################################


####################  Section Start  ###########################################
####################   Submodules    ###########################################
Before you can add a repo as a submodule, that repo MUST exist (at least as far as I can tell)
So step 1 is to create the repo:
Creating brand new git repo:
  mkdir repoName
  cd repoName
  git init
  git add files
  git commit

Adding a submodule
    git submodule add <REMOTE_LOCATION> <SUB_DIR_PATH>
      The <REMOTE_LOCATION> can be either a complete URL or an actual directory path (using scp-style)
        You need to ensure that you have the ability to clone the given repository location.
      The <SUB_DIR_PATH> is the path it will have AFTER (underneath) the main git repo that you're adding it into.
    Ex:
      git submodule add git@mygithost:billboard lib/billboard
####################  Section End    ###########################################
